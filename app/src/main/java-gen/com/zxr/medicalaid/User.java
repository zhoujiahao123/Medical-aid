package com.zxr.medicalaid;

import com.zxr.medicalaid.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER.
 */
public class User {

    private Long id;
    private String idString;
    private String uName;
    private String phoneNumber;
    private String password;
    private String type;
    private Integer isAlready;
    private Long linkId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Link link;
    private Long link__resolvedKey;


    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String idString, String uName, String phoneNumber, String password, String type, Integer isAlready, Long linkId) {
        this.id = id;
        this.idString = idString;
        this.uName = uName;
        this.phoneNumber = phoneNumber;
        this.password = password;
        this.type = type;
        this.isAlready = isAlready;
        this.linkId = linkId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getIdString() {
        return idString;
    }

    public void setIdString(String idString) {
        this.idString = idString;
    }

    public String getUName() {
        return uName;
    }

    public void setUName(String uName) {
        this.uName = uName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getIsAlready() {
        return isAlready;
    }

    public void setIsAlready(Integer isAlready) {
        this.isAlready = isAlready;
    }

    public Long getLinkId() {
        return linkId;
    }

    public void setLinkId(Long linkId) {
        this.linkId = linkId;
    }

    /** To-one relationship, resolved on first access. */
    public Link getLink() {
        Long __key = this.linkId;
        if (link__resolvedKey == null || !link__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LinkDao targetDao = daoSession.getLinkDao();
            Link linkNew = targetDao.load(__key);
            synchronized (this) {
                link = linkNew;
            	link__resolvedKey = __key;
            }
        }
        return link;
    }

    public void setLink(Link link) {
        synchronized (this) {
            this.link = link;
            linkId = link == null ? null : link.getId();
            link__resolvedKey = linkId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
