package com.zxr.medicalaid;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zxr.medicalaid.MedicalList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEDICAL_LIST.
*/
public class MedicalListDao extends AbstractDao<MedicalList, Void> {

    public static final String TABLENAME = "MEDICAL_LIST";

    /**
     * Properties of entity MedicalList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", false, "DATE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Weight = new Property(2, String.class, "weight", false, "WEIGHT");
        public final static Property Patient = new Property(3, String.class, "patient", false, "PATIENT");
    };


    public MedicalListDao(DaoConfig config) {
        super(config);
    }
    
    public MedicalListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEDICAL_LIST' (" + //
                "'DATE' TEXT," + // 0: date
                "'NAME' TEXT," + // 1: name
                "'WEIGHT' TEXT," + // 2: weight
                "'PATIENT' TEXT);"); // 3: patient
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEDICAL_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MedicalList entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(3, weight);
        }
 
        String patient = entity.getPatient();
        if (patient != null) {
            stmt.bindString(4, patient);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MedicalList readEntity(Cursor cursor, int offset) {
        MedicalList entity = new MedicalList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weight
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // patient
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MedicalList entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeight(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPatient(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MedicalList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MedicalList entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
